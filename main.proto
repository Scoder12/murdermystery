syntax = "proto3";
package murdermystery;

option go_package = ".;pb";

// Server Messages
message Handshake {
  enum Status {
    UNKNOWN = 0;
    OK = 1;
  }
  Status status = 1;
  int32 id = 2;
}

message Host { bool isHost = 1; }

message Players {
  message Player {
    string name = 1;
    int32 id = 2;
  }

  repeated Player players = 1;
  int32 host_id = 2;
}

message Error {
  enum E_type {
    UNKNOWN = 0;
    DISCONNECT = 1;
    BADNAME = 2;
  }
  E_type msg = 1;
}

message Alert {
  enum Msg {
    UNKNOWN = 0;
    NEEDMOREPLAYERS = 1;
  }
  Msg msg = 1;
}

enum Character {
  NONE = 0;
  CITIZEN = 1;
  WEREWOLF = 2;
  HEALER = 3;
  PROPHET = 4;
  HUNTER = 5;
}

message SetCharacter { Character character = 1; }

message FellowWolves { repeated int32 ids = 1; }

message VoteRequest {
  enum Type {
    UNKNOWN = 0;
    KILL = 1;
    PROPHET = 2;
    HEALERHEAL = 3;
    HEALERPOISON = 4;
    JURY = 5;
  }
  repeated int32 choice_IDs = 1;
  Type type = 2;
}

enum VoteResultType {
  NOWINNER = 0;
  WIN = 1;
  TIE = 2;
}

message JuryVoteResult {
  VoteResultType status = 1;
  int32 winner = 2;
}

message VoteResult {
  message CandidateResult {
    int32 id = 1;
    repeated int32 voters = 2;
  }
  repeated CandidateResult candidates = 1;
  JuryVoteResult jury = 2;
}

message VoteOver { VoteResult result = 1; }

message ProphetReveal {
  int32 id = 1;
  bool good = 2;
}

message KillReveal { repeated int32 killed_IDs = 1; }

enum KillReason {
  UNKNOWN = 0;
  WOLVES = 1;
  VOTED = 2;
  HEALERPOISON = 3;
}

message Killed { KillReason reason = 1; }

message GameOver {
  enum Reason {
    NONE = 0;
    WEREWOLF_WIN = 1;
    CITIZEN_WIN = 2;
  }
  message Player {
    int32 id = 1;
    Character character = 2;
  }

  Reason reason = 1;
  repeated Player players = 2;
}

message SpectatorAssignedCharacter {
  int32 id = 1;
  Character character = 2;
}

message SpectatorProphetReveal {
  int32 prophet_id = 1;
  int32 choice_id = 2;
  bool good = 3;
}

message SpectatorHealerHeal {
  int32 healer = 1;
  repeated int32 healed = 2;
}

// Don't need SpectatorHealerPoison because that is a KillReason handled by
// SpecatatorKill.

message SpectatorKill {
  KillReason reason = 1;
  int32 killed = 2;
}

message SpectatorVoteRequest {
  repeated int32 candidates = 1;
  VoteRequest vote_request = 2;
}

message SpectatorVoteOver { VoteOver vote_over = 3; }

// No SpectatorGameOver, GameOver is broadcast to everyone

message SpectatorUpdate {
  oneof evt {
    SpectatorAssignedCharacter set_char = 1;
    SpectatorProphetReveal prophet_reveal = 2;
    SpectatorHealerHeal healer_heal = 3;
    SpectatorKill kill = 4;
    SpectatorVoteRequest vote_request = 5;
    SpectatorVoteOver vote_over = 6;
  }
}

message BulkSpectatorUpdate { repeated SpectatorUpdate update = 1; }

message PlayerStatus { repeated int32 alive = 1; }

// The Server message
message ServerMessage {
  oneof data {
    Handshake handshake = 1;
    Host host = 2;
    Players players = 3;
    Error error = 4;
    Alert alert = 5;
    SetCharacter set_character = 6;
    FellowWolves fellow_wolves = 7;
    VoteRequest vote_request = 8;
    VoteOver vote_over = 9;
    ProphetReveal prophet_reveal = 11;
    SpectatorUpdate spectator_update = 12;
    KillReveal kill_reveal = 13;
    Killed killed = 14;
    GameOver game_over = 15;
    BulkSpectatorUpdate bulk_spectator_update = 16;
    PlayerStatus player_status = 17;
  }
}

// Client Messages
message SetName { string name = 1; }

message StartGame {}

message ClientVote { int32 choice = 1; }

// The client message
message ClientMessage {
  oneof data {
    SetName set_name = 1;
    StartGame start_game = 2;
    ClientVote vote = 3;
  }
}
